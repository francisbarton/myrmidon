% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batch_it.R
\name{batch_it}
\alias{batch_it}
\title{Turn A Long Vector Into A Batched List}
\usage{
batch_it(x, batches = NULL, proportion = NULL, maximise = FALSE, quiet = TRUE)
}
\arguments{
\item{x}{a vector, or a list flattenable to a vector}

\item{batches}{numeric. The size (length) of batches to create. Can be a
single value or multiple values (see examples). Should be a whole,
positive number, if provided, else \code{NULL}}

\item{proportion}{numeric proportional sizes of batches to be created.
For example \code{c(4, 6)} will create two batches of approximately 40\% and
60\% of the length of the target vector (\code{x}). When multiple
\code{proportion} values are provided, these are not repeated.
A single proportion less than 1 is repeated as many times as possible to
get near to the length of the target vector. For example, a \code{proportion}
of 0.1 will be treated as a tenth, and batch sizes will be rounded to
an integer size nearest to a tenth of the length of \code{x}.}

\item{maximise}{boolean, \code{FALSE} by default. If \code{TRUE}, a vector of batch
sizes will be partially repeated to fit maximally to the length
of the target vector. See examples below.}

\item{quiet}{Boolean, \code{TRUE} by default. Whether to show informative
\verb{ui_*} messages from \code{{usethis}}.}
}
\description{
Batch up a long vector, or list of vectors, for example so they can be
passed to services with length-limited APIs.
Go \code{batch_it()} crazy!
}
\examples{
batch_it(seq(2, 60, 2), 6)
batch_it(seq(2, 60, 2), proportion = 0.2)
batch_it(1:100, batches = c(20, 30, 50))
batch_it(letters, batches = c(4, 6))
batch_it(letters, batches = c(4, 6), maximise = TRUE)
batch_it(letters, proportion = c(4, 6))

as_year <- function(x) {
  lubridate::as_date(
    lubridate::ymd(paste0(x, "-01-01")):
    lubridate::ymd(paste0(x, "-12-31"))
  )
}
month_lengths <- function(year) {
  lubridate::as_date(paste0(year, "-", 1:12, "-01")) |>
    lubridate::days_in_month()
}
batch_it(x = as_year(2022), batches = month_lengths(2022))
}
